
Lab6.elf:     file format elf32-littlenios2
Lab6.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000330 memsz 0x0000033c flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         0000018c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  000001ac  000001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000000c  00000350  00000350  00001350  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000026  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001378  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000c6  00000000  00000000  00001420  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000725  00000000  00000000  000014e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000240  00000000  00000000  00001c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000091b  00000000  00000000  00001e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000cc  00000000  00000000  00002768  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000048  00000000  00000000  00002834  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000000d7  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  00002968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000335a  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  0000335d  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00003360  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00003361  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  00003362  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00003366  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  0000336a  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000a  00000000  00000000  0000336e  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000000e  00000000  00000000  00003378  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0001f5d5  00000000  00000000  00003386  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .text	00000000 .text
000001ac l    d  .rodata	00000000 .rodata
00000350 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
000001ac l     O .rodata	000001a2 NAMES
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
000000fc g     F .text	00000040 alt_main
00000000 g     F .entry	0000000c __reset
00000354 g     O .bss	00000004 alt_argv
00008350 g       *ABS*	00000000 _gp
0000035c g       *ABS*	00000000 __bss_end
0000035c g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00000020 g     F .text	00000038 _start
00000170 g     F .text	0000001c alt_sys_init
0000035c g       *ABS*	00000000 __alt_stack_base
00000350 g       *ABS*	00000000 __bss_start
00000058 g     F .text	000000a4 main
00000358 g     O .bss	00000004 alt_envp
0000013c g     F .text	00000034 alt_irq_init
00000350 g     O .bss	00000004 alt_argc
00000350 g       *ABS*	00000000 _edata
0000035c g       *ABS*	00000000 _end
00000000 g       *ABS*	00000000 __alt_mem_memory
0000018c g     F .text	00000020 altera_nios2_qsys_irq_init
0000000c g       .entry	00000000 exit
00002000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dec80014 	ori	sp,sp,8192

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a0d414 	ori	gp,gp,33616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1080d414 	ori	r2,r2,848

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c0d714 	ori	r3,r3,860

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  50:	00000fc0 	call	fc <alt_main>

00000054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  54:	003fff06 	br	54 <alt_after_alt_main>

00000058 <main>:
#define NAMES_SIZE 418

static const char NAMES[NAMES_SIZE] = "PATRICIA ABE TURATO +++--+++ ANDERSON ANTONIO CAMPANHA +++--+++ GUSTAVO FELIPE GOLTZ +++--+++ LUIZ FERNANDO COPETTI +++--+++ JOAO GUILHERME MARTINS SILVA +++--+++ GABRIEL HENRIQUE LINKE +++--+++ JHONNY KRISTYAN VAZ TOSTES DE ASSIS +++--+++ MATHEUS KUNNEN LEDESMA +++--+++ LEONARDO MURAROTO DE FRANCA REIS +++--+++ LUCAS SANTANA RAMOS E SILVA +++--+++ GABRIEL TEODORO COBLINSKI HRYSAY +++--+++ JOAO VITOR DOTTO RISSARDI";

int main()
{
  58:	defffd04 	addi	sp,sp,-12
  5c:	df000215 	stw	fp,8(sp)
  60:	df000204 	addi	fp,sp,8
	char tmp;
	int i = 0;
  64:	e03ffe15 	stw	zero,-8(fp)

	for(i = 0; i < NAMES_SIZE; i++){
  68:	e03ffe15 	stw	zero,-8(fp)
  6c:	00000f06 	br	ac <main+0x54>
		IOWR_8DIRECT(BRAM_0_BASE, i, NAMES[i]);
  70:	e0bffe17 	ldw	r2,-8(fp)
  74:	11080004 	addi	r4,r2,8192
  78:	e0fffe17 	ldw	r3,-8(fp)
  7c:	00800034 	movhi	r2,0
  80:	10806b04 	addi	r2,r2,428
  84:	10c5883a 	add	r2,r2,r3
  88:	10800003 	ldbu	r2,0(r2)
  8c:	10c03fcc 	andi	r3,r2,255
  90:	18c0201c 	xori	r3,r3,128
  94:	18ffe004 	addi	r3,r3,-128
  98:	2005883a 	mov	r2,r4
  9c:	10c00025 	stbio	r3,0(r2)
int main()
{
	char tmp;
	int i = 0;

	for(i = 0; i < NAMES_SIZE; i++){
  a0:	e0bffe17 	ldw	r2,-8(fp)
  a4:	10800044 	addi	r2,r2,1
  a8:	e0bffe15 	stw	r2,-8(fp)
  ac:	e0bffe17 	ldw	r2,-8(fp)
  b0:	10806890 	cmplti	r2,r2,418
  b4:	103fee1e 	bne	r2,zero,70 <main+0x18>
		IOWR_8DIRECT(BRAM_0_BASE, i, NAMES[i]);
	}

	for(i = 0; i < NAMES_SIZE; i++){
  b8:	e03ffe15 	stw	zero,-8(fp)
  bc:	00000706 	br	dc <main+0x84>
		tmp = IORD_8DIRECT(BRAM_0_BASE, i);
  c0:	e0bffe17 	ldw	r2,-8(fp)
  c4:	10880004 	addi	r2,r2,8192
  c8:	10800023 	ldbuio	r2,0(r2)
  cc:	e0bfff05 	stb	r2,-4(fp)

	for(i = 0; i < NAMES_SIZE; i++){
		IOWR_8DIRECT(BRAM_0_BASE, i, NAMES[i]);
	}

	for(i = 0; i < NAMES_SIZE; i++){
  d0:	e0bffe17 	ldw	r2,-8(fp)
  d4:	10800044 	addi	r2,r2,1
  d8:	e0bffe15 	stw	r2,-8(fp)
  dc:	e0bffe17 	ldw	r2,-8(fp)
  e0:	10806890 	cmplti	r2,r2,418
  e4:	103ff61e 	bne	r2,zero,c0 <main+0x68>
		tmp = IORD_8DIRECT(BRAM_0_BASE, i);
	}

	return 0;
  e8:	0005883a 	mov	r2,zero
}
  ec:	e037883a 	mov	sp,fp
  f0:	df000017 	ldw	fp,0(sp)
  f4:	dec00104 	addi	sp,sp,4
  f8:	f800283a 	ret

000000fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	df000015 	stw	fp,0(sp)
 108:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 10c:	0009883a 	mov	r4,zero
 110:	000013c0 	call	13c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 114:	00001700 	call	170 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 118:	d1200017 	ldw	r4,-32768(gp)
 11c:	d1600117 	ldw	r5,-32764(gp)
 120:	d1a00217 	ldw	r6,-32760(gp)
 124:	00000580 	call	58 <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 128:	e037883a 	mov	sp,fp
 12c:	dfc00117 	ldw	ra,4(sp)
 130:	df000017 	ldw	fp,0(sp)
 134:	dec00204 	addi	sp,sp,8
 138:	f800283a 	ret

0000013c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 13c:	defffd04 	addi	sp,sp,-12
 140:	dfc00215 	stw	ra,8(sp)
 144:	df000115 	stw	fp,4(sp)
 148:	df000104 	addi	fp,sp,4
 14c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 150:	000018c0 	call	18c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 154:	00800044 	movi	r2,1
 158:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 15c:	e037883a 	mov	sp,fp
 160:	dfc00117 	ldw	ra,4(sp)
 164:	df000017 	ldw	fp,0(sp)
 168:	dec00204 	addi	sp,sp,8
 16c:	f800283a 	ret

00000170 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 170:	deffff04 	addi	sp,sp,-4
 174:	df000015 	stw	fp,0(sp)
 178:	d839883a 	mov	fp,sp
}
 17c:	e037883a 	mov	sp,fp
 180:	df000017 	ldw	fp,0(sp)
 184:	dec00104 	addi	sp,sp,4
 188:	f800283a 	ret

0000018c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 18c:	deffff04 	addi	sp,sp,-4
 190:	df000015 	stw	fp,0(sp)
 194:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 198:	000170fa 	wrctl	ienable,zero
}
 19c:	e037883a 	mov	sp,fp
 1a0:	df000017 	ldw	fp,0(sp)
 1a4:	dec00104 	addi	sp,sp,4
 1a8:	f800283a 	ret
